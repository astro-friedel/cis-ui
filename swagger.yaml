swagger: '2.0'
info:
  description: >-
    This is the API specification for the [Crops in
    Silico](http://cropsinsilico.org/) project.  This documentation was
    generated using [Swagger](http://swagger.io).
  version: 0.1.3
  title: Crops in Silico API
  termsOfService: 'https://www.wikihow.com/Write-Terms-and-Conditions'
  contact:
    email: lambert8@illinois.edu
  license:
    name: BSD-3
    url: 'https://opensource.org/licenses/BSD-3-Clause'
host: proto.cis.ndslabs.org
basePath: /api/v1
tags:
  - name: models
    description: Retrieve server data (static)
    externalDocs:
      description: Find out more
      url: 'https://cropsinsilico.github.io/cis_interface/'
  - name: graphs
    description: Submit client data (dynamic)
schemes:
  - http
  - https
paths:
  /models:
    get:
      tags:
        - models
      summary: Retrieve a list of all available models in the system
      description: ''
      operationId: get_models
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema: 
            type: array
            items:
              $ref: '#/definitions/Model'
  /graphs:
    post:
      tags:
        - graphs
      summary: Formats and returns a YAML file for running the Graph in cisrun
      description: ''
      operationId: post_graphs
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: A new graph of models to run
          required: true
          schema:
            $ref: '#/definitions/Graph'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid input
        '500':
          description: Server error

  # DEPRECATED: use POST /graphs instead
  /simulations:
    post:
      tags:
      - "simulations"
      summary: "Create a new simulation"
      description: ""
      deprecated: true
      operationId: "post_simulations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "A new set of simulation models to run"
        required: true
        schema:
          $ref: "#/definitions/Simulation"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"
        500:
          description: "Server error"
      x-swagger-router-controller: "swagger_server.controllers.simulations_controller"
definitions:
  Model:
    description: Represents a unit that can be run by the system
    type: object
    required:
      - id
      - name
      - driver
      - args
      - inputs
      - outputs
    properties:
      id:
        description: The primary key for this model
        type: integer
      name:
        description: The short name / identifier of this model
        type: string
      description:
        description: Long name / description of this model
        type: string
      driver:
        $ref: '#/definitions/ModelDriver'
      args:
        description: Path to the model source code on disk
        type: string
      client_of:
        description: Denotes that the model is the client in some context
        type: string
      is_server:
        description: Denotes that the model is the server in some context
        type: string
      inputs:
        description: Input Coms associated with this Model
        type: array
        items:
          $ref: '#/definitions/Com'
      outputs:
        description: Output Coms associated with this Model
        type: array
        items:
          $ref: '#/definitions/Com'
  Com:
    description: Represents one input or output of a Model
    type: object
    required:
      - name
      - model_id
    properties:
      name:
        description: The (unique) name of the Com
        type: string
      model_id:
        description: The id of the model that the Com is part of
        type: string
        
  Graph:
    type: object
    description: Represents the current state of a user's canvas
    required:
      - nodes
      - edges
    properties:
      nodes:
        type: array
        items:
          $ref: '#/definitions/Node'
      edges:
        type: array
        items:
          $ref: '#/definitions/Edge'
  Node:
    type: object
    description: Represents a node on the user's canvas
    required:
      - name
      - model
      - inputs
      - outputs
    properties:
      id:
        description: The primary key for this node
        type: integer
      model:
        $ref: '#/definitions/Model'
      name:
        description: A label for this node
        type: string
      description:
        description: A longer description for this node
        type: string
      inputs:
        description: Input Coms associated with this Node
        type: array
        items:
          $ref: '#/definitions/Com'
      outputs:
        description: Output Coms associated with this Node
        type: array
        items:
          $ref: '#/definitions/Com'
  Edge:
    type: object
    description: Represents a connection from an input Com of a Node \
      to an output Com
    required:
      - name
      - type
      - args
    properties:
      id:
        description: The primary key for this edge
        type: integer
      name:
        description: A label for this edge
        type: string
      args:
        description: The queue name or file name to use (depends on 'type')
        type: string
      type:
        $ref: '#/definitions/EdgeType'
      from:
        $ref: '#/definitions/Com'
      to:
        $ref: '#/definitions/Com'
      operation:
        type: string
  ModelDriver:
    description: The driver to use for running a particular model
    type: string
    enum:
      - GCCModelDriver
      - PythonModelDriver
      - MatlabModelDriver
  EdgeType:
    description: The driver to use for this input / output Com
    type: string
    enum:
      - File
      - AsciiFile
      - AsciiTable
      - AsciiTableArray
      - PickleFile
      - MatFile
      - RMQ
      - ZMQ

  # DEPRECATED: use Graph instead
  Simulation:
    type: "object"
    properties:
      models:
        type: "array"
        items:
          $ref: "#/definitions/LegacyModel"
      namespace:
        type: "string"
    example:
      models:
      - name: "name"
        path: "path"
      - name: "name"
        path: "path"
      namespace: "namespace"

  # DEPRECATED: use Model instead
  LegacyModel:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The short name / identifier of this model"
      path:
        type: "string"
        description: "Path to the YAML file on disk representing this model"
    example:
      name: "name"
      path: "path"
externalDocs:
  description: Find out more about Crops in Silico
  url: 'http://cropsinsilico.org/about-us/'

